I"C<blockquote>
  <p>“Yeah It’s leetcode problem. ”</p>
</blockquote>

<h2 id="问题描述">问题描述</h2>

<p>Given <em>n</em> non-negative integers <em>a1</em>, <em>a2</em>, …, <em>an</em> , where each represents a point at coordinate (<em>i</em>, <em>ai</em>). <em>n</em> vertical lines are drawn such that the two endpoints of line <em>i</em> is at (<em>i</em>, <em>ai</em>) and (<em>i</em>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>

<p><img src="/img/leetcode/11-description.png" alt="11-description" /></p>

<h2 id="brute-force">Brute Force</h2>

<p>一一遍历，o（n2）</p>

<h2 id="贪心算法">贪心算法</h2>

<p>从两边开始向中间缩小;每一步比较左右边界高度,高度小的那个向里走一步</p>

<ul>
  <li>这个贪心算法,为什么最优解不会被错过？</li>
</ul>

<p>反证法 假设会被错过。假设最优解是横坐标为x1,x2(x2在右边)的这两个点组成的，只考虑扫描到x2时,x1被错过的情况(x2被错过同理)：</p>

<p>被错过指的是 当右指针向左扫描经过x2之后,左指针还在x1的左边P处时,x1被错过。</p>

<p>​	情况一   x2&gt;p:  x2会被保留,然后左指针向右移动到x1,x1不会被错过</p>

<p>​	情况二   x2&lt;p:</p>

<p>​		小情况一：height[p]&gt;height[x1]    则最优解为 p,x2而不是 x1,x2。  假设不成立</p>

 		小情况二：p&lt;=x1  最优解还是p,x2。 假设不成立（因为x2比p和x1都小,所以容器高度取决于x2,而p比x1偏左,所以p,x2比x1,x2面积大）

<p>代码：</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">maxArea</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">left</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">right</span><span class="o">=</span><span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">maxArea</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">left</span><span class="o">&lt;</span><span class="n">right</span><span class="p">){</span>
            <span class="n">maxArea</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">maxArea</span><span class="p">,</span><span class="n">min</span><span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">right</span><span class="p">],</span><span class="n">height</span><span class="p">[</span><span class="n">left</span><span class="p">])</span><span class="o">*</span><span class="p">(</span><span class="n">right</span><span class="o">-</span><span class="n">left</span><span class="p">));</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">right</span><span class="p">]</span><span class="o">&lt;</span><span class="n">height</span><span class="p">[</span><span class="n">left</span><span class="p">]){</span>
                <span class="n">right</span><span class="o">--</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span><span class="p">{</span>
                <span class="n">left</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">maxArea</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET