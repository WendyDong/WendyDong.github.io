I"<blockquote>
  <p>“Yeah It’s leetcode problem. ”</p>
</blockquote>

<h2 id="问题描述">问题描述</h2>

<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>

<p><strong>Example:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4
Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Note:</strong></p>

<p>问题很简单，就是两个已经排序好的链表合成一个。</p>

<p>思路其实也挺简单，一个一个比较呗，先比较两个的head, 谁小就构成新的，head向后移动，继续比较head。</p>

<p>根据上面的说法就可以想到，我们可以直接写出来这样的代码，也可以递归的写出来。</p>

<h2 id="直接合并">直接合并</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">ListNode</span><span class="o">*</span> <span class="n">mergeTwoLists</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">l1</span><span class="p">,</span> <span class="n">ListNode</span><span class="o">*</span> <span class="n">l2</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//创建一个dummy头指针，这是比较常见的操作，注意一下</span>
        <span class="n">ListNode</span><span class="o">*</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
        <span class="n">ListNode</span><span class="o">*</span> <span class="n">cur</span><span class="o">=</span><span class="n">dummy</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">l1</span> <span class="n">and</span> <span class="n">l2</span><span class="p">){</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">l1</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">l2</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">){</span>
                <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">l1</span><span class="p">;</span>
                <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span><span class="p">{</span>
                <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">l2</span><span class="p">;</span>
                <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">l1</span><span class="p">)</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">l1</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">l2</span><span class="p">)</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">l2</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">dummy</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="递归">递归</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">ListNode</span><span class="o">*</span> <span class="n">mergeTwoLists</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">l1</span><span class="p">,</span> <span class="n">ListNode</span><span class="o">*</span> <span class="n">l2</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">if</span> <span class="p">(</span><span class="n">not</span> <span class="n">l1</span> <span class="n">or</span> <span class="n">not</span> <span class="n">l2</span><span class="p">){</span>
             <span class="k">if</span><span class="p">(</span><span class="n">not</span> <span class="n">l1</span><span class="p">){</span>
                 <span class="k">return</span> <span class="n">l2</span><span class="p">;</span>
             <span class="p">}</span>
             <span class="k">if</span> <span class="p">(</span><span class="n">not</span> <span class="n">l2</span><span class="p">){</span>
                 <span class="k">return</span> <span class="n">l1</span><span class="p">;</span>
             <span class="p">}</span>
         <span class="p">}</span>
         <span class="k">if</span> <span class="p">(</span><span class="n">l1</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">&lt;</span><span class="n">l2</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">){</span>
             <span class="n">l1</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">=</span><span class="n">mergeTwoLists</span><span class="p">(</span><span class="n">l1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span> <span class="n">l2</span><span class="p">);</span>
             <span class="k">return</span> <span class="n">l1</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="k">else</span><span class="p">{</span>
             <span class="n">l2</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">=</span><span class="n">mergeTwoLists</span><span class="p">(</span><span class="n">l2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span> <span class="n">l1</span><span class="p">);</span>
             <span class="k">return</span> <span class="n">l2</span><span class="p">;</span>
         <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET