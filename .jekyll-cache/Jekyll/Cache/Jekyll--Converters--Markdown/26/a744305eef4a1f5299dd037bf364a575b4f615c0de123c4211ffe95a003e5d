I"s+<blockquote>
  <p>“Yeah It’s leetcode problem. ”</p>
</blockquote>

<h2 id="问题描述">问题描述</h2>

<p>问题很容易理解，给定一个数组，找到这个数组能够接到的最多的雨水，看图一下子就能理解题目</p>

<p>Given <em>n</em> non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p>

<p><img src="/img/leetcode/42-description.png" alt="image-20191107160918388" /></p>

<p><strong>Example:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="dp">DP</h2>

<p>这个题的思路是这样的，判断当前这个位置能不能蓄水，能存多少水的思路：左边的最大柱子，右边的最大柱子，（包含自身），这两个柱子的最小值决定了能不能蓄水，能存多少水就是这个最小值在先去自身的高度，这就是这个位置所能存的水的数量。把每个位置都算出来即可。</p>

<p>用dp的话，就是从左到右 先依次算出来位置左侧最大的柱子，再从右到左，依次算出来右侧最大的柱子，再遍历每个柱子，计算蓄水的数量即可。</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">trap</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>      
        <span class="kt">int</span> <span class="n">size</span><span class="o">=</span><span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">ans</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">size</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
            <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">left_max</span><span class="p">(</span><span class="n">size</span><span class="p">),</span> <span class="n">right_max</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
        <span class="n">left_max</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">height</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="n">right_max</span><span class="p">[</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">height</span><span class="p">[</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="n">left_max</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">left_max</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">size</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">){</span>
            <span class="n">right_max</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">right_max</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="n">ans</span><span class="o">+=</span><span class="n">min</span><span class="p">(</span><span class="n">right_max</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">left_max</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">-</span><span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="two-pointers">Two pointers</h2>

<p>这个的思想就跟<a href="https://wendydong.github.io/2019/10/21/leetcode11-Container-With-Most-Water/">最大蓄水池</a>那个很像了，左右各一个指针，当左侧的指针位置高度较小的时候，决定因素在左侧，这个时候就比较当前值与left_max的大小，如果比left_max大，更新left_max，否则就可以蓄水啦，计算这个位置能蓄水的数量即可。反之同理。</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">trap</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">size</span><span class="o">=</span><span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">ans</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">size</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
            <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">left</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">right</span><span class="o">=</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">left_max</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">right_max</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">left</span><span class="o">&lt;</span><span class="n">right</span><span class="p">){</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">left</span><span class="p">]</span><span class="o">&lt;</span><span class="n">height</span><span class="p">[</span><span class="n">right</span><span class="p">]){</span>
                <span class="n">height</span><span class="p">[</span><span class="n">left</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">left_max</span><span class="o">?</span><span class="n">left_max</span><span class="o">=</span><span class="n">height</span><span class="p">[</span><span class="n">left</span><span class="p">]</span><span class="o">:</span><span class="n">ans</span><span class="o">+=</span><span class="p">(</span><span class="n">left_max</span><span class="o">-</span><span class="n">height</span><span class="p">[</span><span class="n">left</span><span class="p">]);</span>
                <span class="n">left</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span><span class="p">{</span>
                <span class="n">height</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">right_max</span> <span class="o">?</span> <span class="p">(</span><span class="n">right_max</span> <span class="o">=</span> <span class="n">height</span><span class="p">[</span><span class="n">right</span><span class="p">])</span> <span class="o">:</span> <span class="n">ans</span> <span class="o">+=</span> <span class="p">(</span><span class="n">right_max</span> <span class="o">-</span> <span class="n">height</span><span class="p">[</span><span class="n">right</span><span class="p">]);</span>
                <span class="n">right</span><span class="o">--</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET